{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import type { ReadStream } from \"node:fs\";\nimport { UTApi } from \"uploadthing/server\";\n\ninterface ProviderOptions {\n  token?: string;\n}\ninterface File {\n  name: string;\n  alternativeText?: string;\n  caption?: string;\n  width?: number;\n  height?: number;\n  formats?: Record<string, unknown>;\n  hash: string;\n  ext?: string;\n  mime: string;\n  size: number;\n  sizeInBytes: number;\n  url: string;\n  previewUrl?: string;\n  path?: string;\n  provider?: string;\n  provider_metadata?: Record<string, unknown>;\n  stream?: ReadStream;\n  buffer?: Buffer;\n}\n\ninterface StrapiUploadProviderMethods {\n  upload(file: File): Promise<void | null>;\n  uploadStream(file: File): Promise<void | null>;\n  delete(file: File): Promise<void | null>;\n}\n\nexport default {\n  init: (providerOptions: ProviderOptions): StrapiUploadProviderMethods => {\n    const utapi = new UTApi({\n      token: providerOptions.token || process.env.UPLOADTHING_TOKEN,\n    });\n\n    return {\n      upload: async (file: File): Promise<void | null> => {\n        try {\n          if (!file.buffer) {\n            throw new Error(\"No file buffer provided\");\n          }\n\n          const toUploadFile = new globalThis.File([file.buffer], file.name, {\n            type: file.mime,\n          });\n\n          const [uploadThingResponse] = await utapi.uploadFiles([toUploadFile]);\n          if (!uploadThingResponse.data) {\n            throw new Error(\"No uploadThingResponse data\");\n          } else {\n            /**\n             ** uploadThingResponse.data.url && uploadThingResponse.data.appUrl are deprecated\n             */\n            file.url = uploadThingResponse.data.ufsUrl;\n            file.hash = uploadThingResponse.data.key;\n          }\n        } catch (error: unknown) {\n          const errorMessage =\n            error instanceof Error ? error.message : \"Unknown error\";\n          console.error(`ðŸš€ ~ upload error: ${errorMessage}`);\n          return null;\n        }\n      },\n\n      uploadStream: async (file: File): Promise<void | null> => {\n        try {\n          if (!file.stream) {\n            throw new Error(\"No file stream provided\");\n          }\n\n          const chunks = [];\n          for await (const chunk of file.stream) {\n            chunks.push(Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk));\n          }\n          const buffer = Buffer.concat(chunks);\n\n          const toUploadFile = new globalThis.File([buffer], file.name, {\n            type: file.mime,\n          });\n\n          const uploadedFile = await utapi.uploadFiles([toUploadFile]);\n          if (!uploadedFile[0].data) {\n            throw new Error(\"No uploadedFile data\");\n          }\n          file.url = uploadedFile[0].data.ufsUrl;\n          file.hash = uploadedFile[0].data.key;\n        } catch (error: unknown) {\n          const errorMessage =\n            error instanceof Error ? error.message : \"Unknown error\";\n          console.error(`ðŸš€ ~ uploadStream error: ${errorMessage}`);\n          return null;\n        }\n      },\n\n      delete: async (file: File): Promise<void | null> => {\n        try {\n          const fileKey = file.hash;\n          if (!fileKey) {\n            throw new Error(\"No file key provided for deletion\");\n          }\n\n          await utapi.deleteFiles([fileKey]);\n        } catch (error: unknown) {\n          const errorMessage =\n            error instanceof Error ? error.message : \"Unknown error\";\n          console.log(\n            `ðŸš€ ~ Could not delete file from UploadThing: ${errorMessage}`\n          );\n          return null;\n        }\n      },\n    };\n  },\n};\n"],"names":["init","providerOptions","utapi","UTApi","token","process","env","UPLOADTHING_TOKEN","upload","file","buffer","Error","toUploadFile","globalThis","File","name","type","mime","uploadThingResponse","uploadFiles","data","url","ufsUrl","hash","key","error","errorMessage","message","console","uploadStream","stream","chunks","chunk","push","Buffer","isBuffer","from","concat","uploadedFile","delete","fileKey","deleteFiles","log"],"mappings":"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"}